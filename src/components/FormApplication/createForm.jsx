import React, { useState, useEffect } from 'react';
import CustomTextArea from '../UI/CustomTextArea';


const Form = () => {
  const [text1, setText1] = useState("");
  const [text2, setText2] = useState("");
  const [text3, setText3] = useState("");
  const [isSwitchOn, setIsSwitchOn] = useState(false); 
  const [isFormFilled, setIsFormFilled] = useState(false);
  const tg = window.Telegram.WebApp;

  const handleTextChange1 = (text) => {
    setText1(text);
  };

  const handleTextChange2 = (text) => {
    setText2(text);
  };

  const handleTextChange3 = (text) => {
    setText3(text);
  };

  useEffect(() => {
    if (text1.trim() !== '' && text2.trim() !== '' && text3.trim() !== '') {
      setIsFormFilled(true);
    } else {
      setIsFormFilled(false);
    }
  }, [text1, text2, text3]);

  const handleSubmit = () => {
    console.log('–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', text1, text2, text3);
    const data = {
      address: text1,
      category: text2,
      description: text3,
      isSwitchOn: isSwitchOn
    };
    tg.sendData(JSON.stringify(data));
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', JSON.stringify(data));
  };

  return (
    <div className="form">
      <div className='greeting'>
        <label>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üëã<br /> –ß–µ–º –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å?</label>
      </div>
      <CustomTextArea label="–ê–¥—Ä–µ—Å" placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ü–ó–£" onTextChange={handleTextChange1} />
      <CustomTextArea label="–¢–µ–º–∞ –∑–∞—è–≤–∫–∏" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞—è–≤–∫–∏" onTextChange={handleTextChange2} />
      <CustomTextArea label="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏" placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–∫–∏" onTextChange={handleTextChange3} />
      <div className="button-container">
        <button disabled={!isFormFilled} onClick={handleSubmit}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </div>
      <div className="form-group">
        <label htmlFor="switch" class="custom-label">–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –∑–∞—è–≤–∫–µ —Ñ–∞–π–ª—ã</label>
        <label className="switch">
          <input
            type="checkbox"
            id="switch"
            checked={isSwitchOn}
            onChange={() => setIsSwitchOn(!isSwitchOn)}
          />
          <span className="slider round"></span>
        </label>
      </div>
    </div>
  );
}

export default Form;
